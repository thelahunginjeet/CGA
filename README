README file for CGA project.

branch	: develop
purpose : main moving target for the project

PROBLEM:
	- rev_dict'ing doesn't work for mutable data

FEATURES / FIXES:
	- another update() issue; added back in (temporarily) calls to the other evaluate() functions
		in the tree to allow testing (otherwise .string, .function, etc. are not created); not the
		best, but we want to fix all this update() stuff anyway. 
	- need to fix the tree structure; it shouldn't have to update so frequently
		- perhaps it should have getters that update specific features with booleans as indicators
		- e.g. getLeaves() returns a list of terminal nodes self.leaves in (True, False)
	- added reverse dictionaries, autogenerated, to the function factory; there is probably a 
		cleaner way to do those bits, but the outward implementation will look the same.  All 
		functions can be accessed by human-readable name (i.e. 'exp') or by function string
		(i.e. 'exp(%s)').
	- all nodes and the algorithm tree now have a node.copy() method; Node itself throws an
		exception if Node.copy() is called (so copy() needs to be overloaded in subclasses of
		Node()).  unit tests show that id(copiedNode) != id(origNode); I think/hope this largely 
		fixes the reference issues, assuming we rewrite the Generator() and Simulator() classes 
		to manipulate copies when appropriate.  tree.copy() returns an AlgorithmTree; everything
		else returns a node.
	- clean up mutation operators; I think the removal of EmptyNode() now means that all manipulated
		trees come back as evaluateable, so some of those comments are no longer relevant.
	- move the CGAGenerator._getRandomFunctional() into CGAFunctions.DataMethodFactory()?
	- should we write functional node constructors like DataNode, so that a call with no arguments
		returns a random one?

